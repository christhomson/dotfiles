scriptencoding utf-8
set encoding=utf-8
set nocompatible                  " Must come first because it changes other options.

if $SHELL =~ 'bin/fish'
  set shell=/bin/bash
endif

let mapleader = ","

" VUNDLE initialization
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

" Automatically close quotes, brackets, etc.
Bundle 'Raimondi/delimitMate'
Bundle 'tpope/vim-endwise'

" Snippets.
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'

Bundle 'christhomson/vim-snippets'

Bundle 'tpope/vim-surround'

Bundle 'bkad/CamelCaseMotion'
map <S-W> <Plug>CamelCaseMotion_w
map <S-B> <Plug>CamelCaseMotion_b
map <S-E> <Plug>CamelCaseMotion_e

Bundle 'terryma/vim-multiple-cursors'

" Git integration.
Bundle 'tpope/vim-fugitive'
if $LOCATION != "school"
  Bundle 'airblade/vim-gitgutter'
endif
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>

" File tree explorer
Bundle 'scrooloose/nerdtree'
let g:NERDTreeWinSize = 40

" Fuzzy file matcher.
" Looks to ancestor directories to find the source control root.
Bundle 'kien/ctrlp.vim'
Bundle 'iurifq/ctrlp-rails.vim'
Bundle 'JazzCore/ctrlp-cmatcher'
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
nnoremap <C-K> :CtrlPControllers<CR>
nnoremap <C-M> :CtrlPModels<CR>
nnoremap <C-W> :CtrlPViews<CR>

" Autocompletion.
Bundle 'Shougo/neocomplcache.vim'
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_force_overwrite_completefunc=1

" Syntax checking on save.
Bundle 'scrooloose/syntastic'
let g:syntastic_java_javac_config_file_enabled = 1

" Fancy status line.
" You may need to install the patched font from
" https://github.com/Lokaltog/powerline-fonts
Bundle 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1

" Find in project.
if executable('ag')
  Bundle 'rking/ag.vim'
  nnoremap <C-a> :Ag 
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
elseif executable('ack')
  Bundle 'mileszs/ack.vim'
  nnoremap <C-a> :Ack 
endif

command! FindCurrentSymbolInProject call FindCurrentSymbolInProject()
function! FindCurrentSymbolInProject()
  if executable('ag')
    let l:currentWordCommand = "Ag"
  elseif executable('ack')
    let l:currentWordCommand = "Ack"
  else
    return
  endif

  execute l:currentWordCommand . " " . expand("<cword>")
endfunction
nnoremap <C-f> :FindCurrentSymbolInProject<cr>

" Ruby stuff.
Bundle 'tpope/vim-rails'
Bundle 'tmhedberg/matchit'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'janx/vim-rubytest'

" Easily rename files.
Bundle 'vim-scripts/Rename2'

Bundle 'tomtom/tcomment_vim'
map <leader>gc :TComment<CR>

Bundle 'chriskempson/vim-tomorrow-theme'
colorscheme Tomorrow-Night-Eighties

" Language support.
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1

Bundle 'kchmck/vim-coffee-script'
Bundle 'AndrewRadev/vim-eco'
au BufNewFile,BufRead *.coffee set filetype=coffee
au BufNewFile,BufRead *.eco set filetype=eco

Bundle 'hail2u/vim-css3-syntax'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'mustache/vim-mustache-handlebars'

Bundle 'jnwhiteh/vim-golang'

" Basic proofreading
Bundle 'reedes/vim-wordy'

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.
set backspace=indent,eol,start    " Intuitive backspacing.
set hidden                        " Handle multiple buffers better.
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set number                        " Show line numbers.
set ruler                         " Show cursor position.
set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
set wrap                          " Turn on line wrapping.
set linebreak
set scrolloff=12
set notitle                       " Set the terminal's title
set visualbell                    " No beeping.
set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location
set noswapfile                    " I like to live dangerously.
set laststatus=2                  " Show the status line all the time
set expandtab                     " Use spaces for tabs.
set shiftwidth=2
set softtabstop=2                 " 2 spaces is a tab.
set updatetime=750
set autoread
set cursorline
set list listchars=tab:»·,trail:· " Show extra whitespace.
set nofoldenable
set ttyfast
set mouse=a
set ttymouse=xterm2

highlight CursorLine cterm=none ctermbg=0

set t_Co=256

" Makes Vim recognize empty .tex files properly as tex files instead of
" plaintex files.
let g:tex_flavor='latex'
let g:Tex_ViewRule_pdf = 'open -a Skim'
let g:Imap_UsePlaceHolders = 0 " disable <++> markers
"let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode $*'

" Ignore patterns for autocompletion.
set wildignore=*.o,*.obj,*~,*sass-cache*,*DS_Store*,*/log/**,*/tmp/**,*.png,*.jpg,*.gif,*node_modules*

nnoremap <silent><Tab> :bn<CR>
nnoremap <silent><S-Tab> :bp<CR>
nnoremap <silent><Leader>d :bd<CR>
nnoremap <silent>U :redo<CR>

" Automatically reload changes you make to .vimrc.
autocmd BufWritePost ~/.vimrc source ~/.vimrc
autocmd BufWritePost ~/.config/vimrc source ~/.vimrc

" Overrides for specific filetypes.
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
autocmd FileType gitcommit setlocal spell textwidth=72
autocmd FileType tex setlocal spell
autocmd FileType mkd setlocal spell
autocmd FileType vim let b:loaded_delimitMate=0
autocmd FileType html,eruby let b:closetag_html_style=1
autocmd FileType text,mkd setlocal textwidth=80
autocmd FileType sql filetype plugin off
autocmd BufRead,BufNewFile *.sqc set filetype=c
autocmd FileType java setlocal shiftwidth=4 tabstop=4 softtabstop=4

autocmd FileType go setlocal noexpandtab tabstop=8 shiftwidth=8 softtabstop=8
autocmd FileType go autocmd BufWritePre <buffer> Fmt

set tw=0


" inoremap  <Up>     <NOP>
" inoremap  <Down>   <NOP>
" inoremap  <Left>   <NOP>
" inoremap  <Right>  <NOP>
" noremap   <Up>     <NOP>
" noremap   <Down>   <NOP>
" noremap   <Left>   <NOP>
" noremap   <Right>  <NOP>

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.
